# -*- coding: utf-8 -*-
"""numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Lpxw1LJuPsTBx5WdWWqgfYr3a5BT-wj

Задача 1 - Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2),
вычисляющая евклидово расстояние между точкой (x1,y1) и (x2,y2).
"""

from math import sqrt, pow

def distance(x1, y1, x2, y2):
  return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2))

x1, y1, x2, y2 = 1, 2, 3, 4
print(round(distance(x1, y1, x2, y2), 2))

"""Задача 2 - Написать функцию season(month), принимающую 1 аргумент — номер месяца (от 1 до 12), которая
присваивает глобальной переменной s время года, которому этот месяц принадлежит (зима, весна,
лето или осень).
"""

def season(month):
  dict_seazon = {(12, 1, 2):"Зима", (3, 4, 5):"Весна", (6, 7, 8):"Лето", (9, 10, 11):"Осень", }
  for i in dict_seazon:
    if month in i:
      return(dict_seazon[i])

month = 6
print(season(month))

"""Задача 3 - Написать функцию is_prime, принимающую 1 аргумент — число от 0 до 1000, и возвращающую True,
если оно простое, и False - иначе.

"""

def is_prime(value):
  if 0 <= value <= 2:
    return False
  else:
    for i in range(2, value//2 + 1):
      if value % i == 0:
        return True
    else:
      return False

value = 999     
print(is_prime(value))

"""Задача 4 - Написать функцию reverse_list(lst), которая принимает в качестве аргумента список и возвращаем его
в перевернутом виде
"""

def reverse_list(lst):
  return lst[::-1]

lst = [1, 2, 3, 4]
new_lst = reverse_list(lst)
print(*lst)
print(*new_lst)

"""Задача 5 - Распечатайте с 4 по 8 символ фразы "Привет мир!" приведенные к верхнему регистру."""

text = "Привет мир!"
print(text[3:8].upper())

"""Задач 6 - Напишите код, который все элементы массива x с нечетными индексами переставит в обратном
порядке.

"""

lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
lst[1::2] = reversed(lst[1::2])
print(*lst)

"""Задача 7 - Напишите цикл, который выводит все числа от 0 до 500, делящиеся на 7, если в них есть цифра 8"""

for value in range(0, 501):
  if "8" in str(value) and value % 7 == 0:
    print(value, end = ", ")

"""Задача 8 - На вход функция more_than_five(lst) получает список из целых чисел. Результатом работы функции
должен стать новый список, в котором содержатся только те числа, которые больше 10 по модулю.

"""

def more_than_five(lst):
  return [i for i in lst if abs(i) > 10]

lst = [1, 10, 12, -9, -11, 0, 100, -1000, 4, -6]
new_lst = more_than_five(lst)
print(new_lst)

"""Задача 1 - Создать матрицу размером 10х10 с 0 внутри, и 1 на границах. """

import numpy as np

matrix = np.ones((10, 10), dtype = int)
matrix[1:-1, 1:-1] = 0
print(matrix)

"""Задача 2 - Создать 5x5 матрицу с 1,2,3,4 над диагональю. Все остальные элементы - 0"""

matrix = np.diag(np.arange(1, 5), k=1)
print(matrix)

"""Задание 3 - Создайте случайную матрицу и вычтите из каждой строки среднее.

"""

N = np.random.randint(3,10)
matrix = np.random.randint(10, size = (N,N))
new_matrix = matrix - np.mean(matrix, axis = 1, keepdims = True)
print(matrix)
print(np.around(new_matrix, decimals = 2))

"""Задание 4 - Написать функцию, принимающую на вход массив и меняющую знак у элементов, значения которых
между 3 и 8. Протестировать на нескольких заданных вами массивах.

"""

def change_array(aray):
  size = aray.shape
  new_aray = aray.flatten()
  for i in range(new_aray.shape[0]):
    if 2 < new_aray[i] < 9:
      new_aray[i] *= -1
  return new_aray.reshape(size)

aray_one = np.array([[1,8], [9,5]])
aray_two = np.arange(0,11)  
aray_three = np.array([[1,8,100,-5], [9,5,4,7], [1,-2,5,10]])
print(change_array(aray_one), end = "\n\n")
print(change_array(aray_two), end = "\n\n")
print(change_array(aray_three), end = "\n\n")

"""Задание 5 - Написать функцию, принимающую на вход массив и вычитающую среднее из каждой строки в
матрице. Протестировать на нескольких заданных вами примерах.

"""

def subtraction_strok(aray):
  for i in range(len(aray)):
    print(aray[i])


aray_one = np.array([[1,8], [9,5]])
aray_two = np.array([1,2,3,4,5,6])
aray_three = np.array([[1,8,100,-5], [9,5,4,7], [1,-2,5,10]])
print(subtraction_strok(aray_one), end = "\n\n")
print(subtraction_strok(aray_two), end = "\n\n")
print(subtraction_strok(aray_three), end = "\n\n")

"""Задание 6 - Дан вектор [1, 2, 3, 4, 5], построить новый вектор с тремя нулями между каждым значением.

"""

vector = np.arange(1,6)
number_zero = 3
new_vector = np.zeros(len(vector) + (len(vector) - 1) * 3, dtype = int)
new_vector[::number_zero + 1] = vector
print(new_vector)

"""Задание 7 - Написать функцию, принимающую на вход матрицу MxN и меняющую 2 любые строки в матрице.
Протестировать на нескольких заданных вами примерах.

"""

def change_matrix(matrix):
  N = matrix.shape[1]
  M = matrix.shape[0]
  numbers = np.random.randint(0,M-1,2)
  for i in numbers:
    matrix[i] = np.random.randint(0,10,N)
  return matrix

matrix_one = np.array([[1,8], [9,5]])
matrix_three = np.array([[1,8,100,-5], [9,5,4,7], [1,-2,5,10]])   
print(change_matrix(matrix_one), end = "\n\n")
print(change_matrix(matrix_three), end = "\n\n")

"""Задание 8 - Написать функцию, принимающую на вход одномерный массив и возвращающую наиболее частое
значение в массиве и частоту его встречи. Протестировать на нескольких заданных вами примерах.

"""

#Для случая, когда больше одного возвращаемого значения, писать было лень((((

def frequent_element(aray):
  count = dict()
  for i in aray:
    count[i] = count.get(i, 0) + 1
  max_frequent = max(count.values())
  for key in count:
    if count[key] == max_frequent:
      return key, count[key]
   
aray_one = np.array([1,2,3,4,3])
aray_two = np.array([1,1,2,2,3,3,4,4,5,6,7,8,4]) 
element_one, frequent_one = frequent_element(aray_one)
element_two, frequent_two = frequent_element(aray_two)
print(f"Самый частый элемент 1-ого массива {element_one} с частотой {frequent_one / len(aray_one)}")
print(f"Самый частый элемент 2-ого массива {element_two} с частотой {frequent_two / len(aray_two)}")

"""Задание 9 - Написать функцию, принимающую на вход массив 16x16 и считающую сумму по блокам 4x4.
Протестировать на нескольких заданных вами примерах.

"""

def summa_blokami(aray):
  for i in range(0, aray.shape[0], 4):
    for j in range(0, aray.shape[1], 4):
      new_aray = aray[i:i+4, j:j+4].flatten()
      summa = new_aray.sum()
      if j + 4 != aray.shape[1]:
        print(summa, end = " ")
      else:
        print(summa)  

aray = np.random.randint(5, size = (16,16))
print(aray, end = "\n\n")
summa_blokami(aray)

"""Задание 10 - Написать функцию, принимающую на вход матрицу и возвращающую n наибольших значений в
массиве. n вводится с клавиатуры. Протестировать на нескольких заданных вами примерах.

Задание 11 - Написать функцию, принимающую на вход 10x3 матрица и находящую строки из неравных значений
(например [2,2,3]). Протестировать на нескольких заданных вами примерах.
"""

def find_strings(matrix):
  print(matrix)
  count = True
  for i in range(matrix.shape[0]):
    if matrix[i,0] != matrix[i,1] or matrix[i,1] != matrix[i,2]:
      count = False
      print(f"Строка из неравных значений под номером: {i+1}")
  if count:
    print("Все элементы в строках матрицы равны между собой")

matrix = np.random.randint(5, size = (10,3))
find_strings(matrix)

"""Задание 12 - Написать функцию, принимающую на вход двумерный массив и находящую все различные строки.
Протестировать на нескольких заданных вами примерах.
"""

def find_strings(matrix):
  print(matrix)
  count = True
  for i in range(matrix.shape[0]):
    if len(set(matrix[i])) != 1:
      count = False
      print(f"Строка из неравных значений под номером: {i+1}")
  if count:
    print("Все элементы в строках матрицы равны между собой")

m, n = np.random.randint(2,10), np.random.randint(2,10)
matrix = np.random.randint(5, size = (m,n))
find_strings(matrix)

"""Задача 13 - Написать функцию, принимающую на вход два вектора одинакого размера и считающую расстояние
между векторами. Протестировать на нескольких заданных вами примерах.
"""

#Маленько не понимаю, какая формула нужна и подходит ли сюда np.dot()

def distance_between_vectors(aray_one, aray_two):
  distance = 0
  for i in range(aray_one.shape[0]):
    distance += (aray_one[i] - aray_two[i]) ** 2
  return distance  

aray_one = np.array([1,2,3,4], float)
aray_two = np.array([5,6,7,8], float)
print(f"Расстояние: {distance_between_vectors(aray_one, aray_two)}") 
print(np.dot(aray_one, aray_two))

"""Задача 14 - Написать функцию, принимающую на вход два вектора одинакого размера и находящую косинус угла
между векторами. Протестировать на нескольких заданных вами примерах.

"""

